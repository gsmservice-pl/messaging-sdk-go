// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AccountType - Account type
type AccountType string

const (
	AccountTypePrePaid  AccountType = "PRE-PAID"
	AccountTypePostPaid AccountType = "POST-PAID"
)

func (e AccountType) ToPointer() *AccountType {
	return &e
}
func (e *AccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRE-PAID":
		fallthrough
	case "POST-PAID":
		*e = AccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountType: %v", v)
	}
}

// AccountResponse - An object containing information about the User's account and balance
type AccountResponse struct {
	// User Login
	Login *string `json:"login,omitempty"`
	// Account type
	AccountType *AccountType `json:"account_type,omitempty"`
	// Acount limit
	Limit *float32 `json:"limit,omitempty"`
	// Current account balance
	Credit *float32 `json:"credit,omitempty"`
	// Subaccount credit balance (null if unlimited)
	Subcredit *float32 `json:"subcredit,omitempty"`
	// Account currency
	Currency *string `json:"currency,omitempty"`
	// User name and surname
	Name *string `json:"name,omitempty"`
	// Is main account?
	IsMain *bool `json:"is_main,omitempty"`
}

func (o *AccountResponse) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

func (o *AccountResponse) GetAccountType() *AccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *AccountResponse) GetLimit() *float32 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *AccountResponse) GetCredit() *float32 {
	if o == nil {
		return nil
	}
	return o.Credit
}

func (o *AccountResponse) GetSubcredit() *float32 {
	if o == nil {
		return nil
	}
	return o.Subcredit
}

func (o *AccountResponse) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountResponse) GetIsMain() *bool {
	if o == nil {
		return nil
	}
	return o.IsMain
}
