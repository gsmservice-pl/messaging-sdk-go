// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gsmservice-pl/messaging-sdk-go/v3/internal/utils"
	"time"
)

type RecipientsType string

const (
	RecipientsTypeStr                       RecipientsType = "str"
	RecipientsTypeArrayOfStr                RecipientsType = "arrayOfStr"
	RecipientsTypePhoneNumberWithCid        RecipientsType = "PhoneNumberWithCid"
	RecipientsTypeArrayOfPhoneNumberWithCid RecipientsType = "arrayOfPhoneNumberWithCid"
)

// Recipients - The recipient number or multiple recipients numbers of single message. To set one recipient, simply use `components.CreateRecipientsStr()` method simply passing to it a `string` with his phone number. To set multiple recipients, please use `components.CreateRecipientsArrayOfStr()` method passing to it `[]string` with recipients.\r\n\r\nOptionally you can also set custom id (user identifier) for each message - use `components.CreateRecipientsPhoneNumberWithCid()` method passing `PhoneNumberWithCid` struct (in case of single recipient) or `operations.CreateRecipientsArrayOfPhoneNumberWithCid()` method passing `[]PhoneNumberWithCid` (in case of multiple recipients).
type Recipients struct {
	Str                       *string              `queryParam:"inline"`
	ArrayOfStr                []string             `queryParam:"inline"`
	PhoneNumberWithCid        *PhoneNumberWithCid  `queryParam:"inline"`
	ArrayOfPhoneNumberWithCid []PhoneNumberWithCid `queryParam:"inline"`

	Type RecipientsType
}

func CreateRecipientsStr(str string) Recipients {
	typ := RecipientsTypeStr

	return Recipients{
		Str:  &str,
		Type: typ,
	}
}

func CreateRecipientsArrayOfStr(arrayOfStr []string) Recipients {
	typ := RecipientsTypeArrayOfStr

	return Recipients{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateRecipientsPhoneNumberWithCid(phoneNumberWithCid PhoneNumberWithCid) Recipients {
	typ := RecipientsTypePhoneNumberWithCid

	return Recipients{
		PhoneNumberWithCid: &phoneNumberWithCid,
		Type:               typ,
	}
}

func CreateRecipientsArrayOfPhoneNumberWithCid(arrayOfPhoneNumberWithCid []PhoneNumberWithCid) Recipients {
	typ := RecipientsTypeArrayOfPhoneNumberWithCid

	return Recipients{
		ArrayOfPhoneNumberWithCid: arrayOfPhoneNumberWithCid,
		Type:                      typ,
	}
}

func (u *Recipients) UnmarshalJSON(data []byte) error {

	var phoneNumberWithCid PhoneNumberWithCid = PhoneNumberWithCid{}
	if err := utils.UnmarshalJSON(data, &phoneNumberWithCid, "", true, true); err == nil {
		u.PhoneNumberWithCid = &phoneNumberWithCid
		u.Type = RecipientsTypePhoneNumberWithCid
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RecipientsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = RecipientsTypeArrayOfStr
		return nil
	}

	var arrayOfPhoneNumberWithCid []PhoneNumberWithCid = []PhoneNumberWithCid{}
	if err := utils.UnmarshalJSON(data, &arrayOfPhoneNumberWithCid, "", true, true); err == nil {
		u.ArrayOfPhoneNumberWithCid = arrayOfPhoneNumberWithCid
		u.Type = RecipientsTypeArrayOfPhoneNumberWithCid
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Recipients", string(data))
}

func (u Recipients) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.PhoneNumberWithCid != nil {
		return utils.MarshalJSON(u.PhoneNumberWithCid, "", true)
	}

	if u.ArrayOfPhoneNumberWithCid != nil {
		return utils.MarshalJSON(u.ArrayOfPhoneNumberWithCid, "", true)
	}

	return nil, errors.New("could not marshal union type Recipients: all fields are null")
}

type AttachmentsType string

const (
	AttachmentsTypeStr        AttachmentsType = "str"
	AttachmentsTypeArrayOfStr AttachmentsType = "arrayOfStr"
)

// Attachments for the message. You can pass here images, audio and video files bodies. To set one attachment please use `components.CreateAttachmentsStr()` method simply passing to it a `string` with attachment body encoded with `base64`. To set multiple attachments - please use `components.CreateAttachmentsArrayOfStr()` method passing to it `[]string` with attachment bodies encoded by `base64`. Max 3 attachments per message.
type Attachments struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type AttachmentsType
}

func CreateAttachmentsStr(str string) Attachments {
	typ := AttachmentsTypeStr

	return Attachments{
		Str:  &str,
		Type: typ,
	}
}

func CreateAttachmentsArrayOfStr(arrayOfStr []string) Attachments {
	typ := AttachmentsTypeArrayOfStr

	return Attachments{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Attachments) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AttachmentsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = AttachmentsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Attachments", string(data))
}

func (u Attachments) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Attachments: all fields are null")
}

// MmsMessage - An object with a new MMS message properties
type MmsMessage struct {
	// The recipient number or multiple recipients numbers of single message. To set one recipient, simply use `components.CreateRecipientsStr()` method simply passing to it a `string` with his phone number. To set multiple recipients, please use `components.CreateRecipientsArrayOfStr()` method passing to it `[]string` with recipients.\r\n\r\nOptionally you can also set custom id (user identifier) for each message - use `components.CreateRecipientsPhoneNumberWithCid()` method passing `PhoneNumberWithCid` struct (in case of single recipient) or `operations.CreateRecipientsArrayOfPhoneNumberWithCid()` method passing `[]PhoneNumberWithCid` (in case of multiple recipients).
	Recipients Recipients `json:"recipients"`
	// MMS message subject
	Subject *string `json:"subject,omitempty"`
	// MMS message content
	Message *string `json:"message,omitempty"`
	// Attachments for the message. You can pass here images, audio and video files bodies. To set one attachment please use `components.CreateAttachmentsStr()` method simply passing to it a `string` with attachment body encoded with `base64`. To set multiple attachments - please use `components.CreateAttachmentsArrayOfStr()` method passing to it `[]string` with attachment bodies encoded by `base64`. Max 3 attachments per message.
	Attachments *Attachments `json:"attachments,omitempty"`
	// Scheduled future date and time of sending the message (in ISO 8601 format). If missing or null - message will be sent immediately
	Date *time.Time `default:"null" json:"date"`
}

func (m MmsMessage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MmsMessage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MmsMessage) GetRecipients() Recipients {
	if o == nil {
		return Recipients{}
	}
	return o.Recipients
}

func (o *MmsMessage) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *MmsMessage) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *MmsMessage) GetAttachments() *Attachments {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *MmsMessage) GetDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.Date
}
