// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/gsmservice-pl/messaging-sdk-go/v3/internal/utils"
	"github.com/gsmservice-pl/messaging-sdk-go/v3/models/components"
)

type GetSmsPriceRequestBodyType string

const (
	GetSmsPriceRequestBodyTypeSmsMessage        GetSmsPriceRequestBodyType = "SmsMessage"
	GetSmsPriceRequestBodyTypeArrayOfSmsMessage GetSmsPriceRequestBodyType = "arrayOfSmsMessage"
)

// GetSmsPriceRequestBody - To check the price of a single message or messages with the same content to multiple recipients, pass a single `SmsMessage` object with the properties of this message using `operations.CreateGetSmsPriceRequestBodySmsMessage()` method. To check the price of multiple messages with different content at the same time, pass a `[]SmsMessage` array with the properties of each message using `operations.CreateGetSmsPriceRequestBodyArrayOfSmsMessage()` method.
type GetSmsPriceRequestBody struct {
	SmsMessage        *components.SmsMessage  `queryParam:"inline,name=requestBody"`
	ArrayOfSmsMessage []components.SmsMessage `queryParam:"inline,name=requestBody"`

	Type GetSmsPriceRequestBodyType
}

func CreateGetSmsPriceRequestBodySmsMessage(smsMessage components.SmsMessage) GetSmsPriceRequestBody {
	typ := GetSmsPriceRequestBodyTypeSmsMessage

	return GetSmsPriceRequestBody{
		SmsMessage: &smsMessage,
		Type:       typ,
	}
}

func CreateGetSmsPriceRequestBodyArrayOfSmsMessage(arrayOfSmsMessage []components.SmsMessage) GetSmsPriceRequestBody {
	typ := GetSmsPriceRequestBodyTypeArrayOfSmsMessage

	return GetSmsPriceRequestBody{
		ArrayOfSmsMessage: arrayOfSmsMessage,
		Type:              typ,
	}
}

func (u *GetSmsPriceRequestBody) UnmarshalJSON(data []byte) error {

	var smsMessage components.SmsMessage = components.SmsMessage{}
	if err := utils.UnmarshalJSON(data, &smsMessage, "", true, nil); err == nil {
		u.SmsMessage = &smsMessage
		u.Type = GetSmsPriceRequestBodyTypeSmsMessage
		return nil
	}

	var arrayOfSmsMessage []components.SmsMessage = []components.SmsMessage{}
	if err := utils.UnmarshalJSON(data, &arrayOfSmsMessage, "", true, nil); err == nil {
		u.ArrayOfSmsMessage = arrayOfSmsMessage
		u.Type = GetSmsPriceRequestBodyTypeArrayOfSmsMessage
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSmsPriceRequestBody", string(data))
}

func (u GetSmsPriceRequestBody) MarshalJSON() ([]byte, error) {
	if u.SmsMessage != nil {
		return utils.MarshalJSON(u.SmsMessage, "", true)
	}

	if u.ArrayOfSmsMessage != nil {
		return utils.MarshalJSON(u.ArrayOfSmsMessage, "", true)
	}

	return nil, errors.New("could not marshal union type GetSmsPriceRequestBody: all fields are null")
}

type GetSmsPriceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request was processed successfully. Please check the price and the details of particular messages in each `Price` object
	Prices  []components.Price
	Headers map[string][]string
}

func (g *GetSmsPriceResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetSmsPriceResponse) GetPrices() []components.Price {
	if g == nil {
		return nil
	}
	return g.Prices
}

func (g *GetSmsPriceResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
